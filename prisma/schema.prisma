generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model blogusers {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int?      @map("__v")
  dateCreated DateTime @db.Date
  email       String
  password    String
  username    String @unique

}

model posts {
  id               String                 @id @default(auto()) @map("_id") @db.ObjectId
  v                Int?                   @map("__v")
  author           String?
  bannerUrl        String?
  blogContent      String
  blogContentDelta String?
  datePosted       DateTime               @db.Date
  description      String
  imageheader      String?
  isBannerDark     Boolean?
  isFeatured       Boolean?
  isPublished      Boolean?
  link             String?
  tags             String[]
  title            String
  updatedAt        DateTime?
  deleted          Boolean?
  deletedAt        DateTime?
}

model snippet {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
  description String
  type String
  content String
  slug String

  ownerId String @db.ObjectId
  datePosted DateTime @db.Date
  owner users @relation(fields: [ownerId], references: [id])
}

model sessions {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  expires Json?

  @@index([expires], map: "expires_1")
}

model tags {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  v     Int?      @map("__v")
  count Int
  name  String @unique
  posts String[]
}

model userauths {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int?      @map("__v")
  accessToken String
  lastAccess  DateTime @db.Date
  userId      String
}

model users {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int?      @map("__v")
  dateCreated DateTime @db.Date
  email       String
  lastAccess  DateTime @db.Date
  password    String
  username    String
  role        String  
  name        String  @default("")
  birthday    DateTime? @db.Date @default(now())
  gender      Gender? @default(male)
  phone       String? @default("")

  snippets snippet[]
}


model config {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  key String @unique
  value String
  description String
}

enum Gender {
  male
  female
}

model assets {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  path String
  type AssetType
  remoteLocation RemoteLocation
  
  uploader String @db.ObjectId
  dateUploaded DateTime

}

enum AssetType {
  MediaThumbnail
  MediaImage
  MediaVideo
  MediaOther
}

enum RemoteLocation {
  SelfHosted
  S3
  GCS
  Others
}

